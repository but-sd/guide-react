{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JSX","text":"<p>JavaScript eXtension est une extension de JavaScript qui permet de cr\u00e9er des composants React de mani\u00e8re plus simple et plus lisible.</p> <p>Elle permet de cr\u00e9er des composants React en utilisant une syntaxe proche du HTML et d'utiliser des expressions JavaScript dans le code HTML.</p> <p>Dans une syntaxe javascript classique, il faut utiliser la fonction React.createElement pour cr\u00e9er un composant React. Cette fonction prend en param\u00e8tre le nom du composant React, les attributs du composant React et les enfants du composant React.</p> <p>Voici un exemple de code React avec la syntaxe javascript classique :</p> <pre><code>import React from \"react\";\n\nfunction App() {\n  return React.createElement(\"h1\", {}, \"Hello World\");\n}\n\nexport default App;\n</code></pre> <p>Avec la syntaxe JSX, il suffit d'utiliser des balises HTML pour cr\u00e9er un composant React. Il n'est pas n\u00e9cessaire d'utiliser la fonction React.createElement.</p> <p>Voici un exemple de code React avec la syntaxe JSX :</p> <pre><code>function App() {\n  return (&lt;h1&gt;Hello World from react with JSX&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre> <p>JSX permet d'avoir un code plus lisible et plus simple \u00e0 \u00e9crire. Elle m\u00e9lange la logique JavaScript et la structure HTML.</p>"},{"location":"#syntaxe","title":"Syntaxe","text":"<p>La syntaxe JSX est tr\u00e8s proche de la syntaxe HTML. Elle permet de cr\u00e9er des composants React en utilisant des balises HTML.</p>"},{"location":"#commentaires","title":"Commentaires","text":"<p>Les commentaires HTML ne sont pas valides en JSX. Il faut utiliser les commentaires JavaScript pour commenter du code JSX.</p> <p>Pour commenter une ligne de code, il faut utiliser <code>//</code> :</p> <pre><code>function App() {\n  return (\n    // Commentaire JSX\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Si vous souhaitez commenter plusieurs lignes de code, il faut utiliser <code>/* */</code> :</p> <pre><code>function App() {\n  return (\n    &lt;&gt;\n      {/* Commentaire JSX */}\n      &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"#attributs","title":"Attributs","text":"<p>La syntaxe JSX permet d'utiliser des attributs HTML dans les composants React. Ces attributs sont utilis\u00e9s pour d\u00e9finir les propri\u00e9t\u00e9s des composants React.</p> <p>Voici un exemple de code React avec des attributs HTML :</p> <pre><code>function App() {\n  return (&lt;h1 id=\"title\"&gt;Hello World&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre> <p>Les attributs HTML s'\u00e9crivent de la m\u00eame mani\u00e8re que les attributs HTML. Ils sont s\u00e9par\u00e9s par des espaces. Cependant il y a quelques diff\u00e9rences entre les attributs HTML et les attributs JSX :</p> <ul> <li>Les attributs HTML sont \u00e9crits en minuscules, alors que les attributs JSX sont \u00e9crits en camelCase (la premi\u00e8re lettre est en minuscule et les lettres suivantes sont en majuscules)</li> <li>Les <code>-</code> sont remplac\u00e9s par une majuscule dans les attributs JSX.</li> </ul> <p>Par exemple, l'attribut auto-complete s'\u00e9crit autoComplete en JSX.</p> <p>L'attribut class du HTML \u00e0 une particularit\u00e9 il s'\u00e9crit className en JSX. En effet, class est un mot r\u00e9serv\u00e9 en JavaScript. Il n'est donc pas possible de l'utiliser en JSX.</p> <p>Voici un exemple de code React avec l'attribut className :</p> <pre><code>function App() {\n  return (&lt;h1 className=\"title\"&gt;Hello World&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre>"},{"location":"#element-racine","title":"El\u00e9ment racine","text":"<p>Il n'est pas possible d'utiliser plusieurs balises HTML dans un composant React. Il ne peut y avoir qu'une seule balise HTML racine dans un composant React.</p> <p>Le code suivant n'est pas valide, car il y a deux balises HTML racines <code>&lt;h1&gt;</code> et <code>&lt;p&gt;</code>:</p> <pre><code>function App() {\n  return (\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;lorem ipsum&lt;/p&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Voici un exemple de code React avec une seule balise HTML racine, la balise <code>&lt;div&gt;</code> :</p> <pre><code>function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello World&lt;/h1&gt;\n      &lt;p&gt;lorem ipsum&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Cette syntaxe n'est pas tr\u00e8s pratique, car elle ajoute une balise HTML qui peut \u00eatre inutile dans le DOM.</p> <p>Si vous souhaitez utiliser plusieurs balises HTML dans un composant React, vous pouvez utiliser la balise React.Fragment. Cette balise permet de cr\u00e9er un composant React sans cr\u00e9er de balise HTML. Dans ce cas, il n'y a pas de balise HTML racine. Il existe une syntaxe raccourcie pour utiliser la balise React.Fragment, qui rend le code plus lisible. Il suffit d'utiliser les balises <code>&lt;&gt;</code> la balise fermante associ\u00e9e.</p> <pre><code>function App() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Hello World&lt;/h1&gt;\n      &lt;p&gt;lorem ipsum&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"#balises-fermantes","title":"Balises fermantes","text":"<p>Il n'est pas possible d'utiliser des balises HTML qui ne sont pas ferm\u00e9es dans un composant React.</p> <p>Voici un exemple de code React non valide avec une balise HTML non ferm\u00e9e :</p> <pre><code>function App() {\n  return (&lt;img src=\"logo.png\"&gt;);\n}\n\nexport default App;\n</code></pre> <p>Afin de rendre le code plus lisible, il est possible d'utiliser la syntaxe raccourcie pour les balises HTML qui ne sont pas ferm\u00e9es. Il suffit d'ajouter un <code>/</code> \u00e0 la fin de la balise HTML.</p> <pre><code>function App() {\n  return (&lt;img src=\"logo.png\" /&gt;);\n}\n\nexport default App;\n</code></pre>"},{"location":"#interpolation","title":"Interpolation","text":"<p>L'interpolation est une fonctionnalit\u00e9 de JSX qui permet d'utiliser des expressions JavaScript dans les composants React. Ces expressions JavaScript sont utilis\u00e9es pour d\u00e9finir les propri\u00e9t\u00e9s des composants React.</p> <p>Voici un exemple de code React avec des expressions JavaScript :</p> <pre><code>function App() {\n  // D\u00e9finition d'une variable\n  const title = \"Hello World\";\n\n  // Utilisation de la variable dans le composant React\n  return (&lt;h1&gt;{title}&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre> <p>L'interpolation est aussi utilis\u00e9e pour \u00e9crire le style CSS dans les composants React. Il faut dans ce cas une double accolade, une premi\u00e8re accolade pour indiquer que l'on utilise une expression JavaScript et une deuxi\u00e8me accolade pour indiquer que l'on utilise un objet JavaScript.</p> <p>Le nom des propri\u00e9t\u00e9s CSS s'\u00e9crit en camelCase. Par exemple, l'attribut background-color s'\u00e9crit backgroundColor.</p> <pre><code>function App() {\n  return (&lt;h1 style={{color: \"red\", backgroundColor: \"blue\"}}&gt;Hello World&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre> <p>On peut utiliser des variables pour d\u00e9finir les propri\u00e9t\u00e9s CSS.</p> <pre><code>// D\u00e9finition d'une variable qui contient un objet JavaScript ayant des propri\u00e9t\u00e9s CSS\nconst style = {\n  color: \"red\",\n  backgroundColor: \"blue\"\n};\n\nfunction App() {\n  // Utilisation de la variable dans le composant React\n  return (&lt;h1 style={style}&gt;Hello World&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre>"},{"location":"#evenements","title":"Ev\u00e9nements","text":"<p>Comme en HTML, il est possible d'ajouter des \u00e9v\u00e9nements aux composants React. Ces \u00e9v\u00e9nements sont utilis\u00e9s pour d\u00e9finir le comportement des composants React. </p> <pre><code>function App() {\n  // D\u00e9finition d'une fonction qui affiche un message dans la console\n  function handleClick() {\n    console.log(\"Hello World\");\n  }\n\n  // D\u00e9clenchement de la fonction au clic sur le composant React\n  return (&lt;h1 onClick={handleClick}&gt;Hello World&lt;/h1&gt;);\n}\n\nexport default App;\n</code></pre>"},{"location":"#condition","title":"Condition","text":"<p>Il est possible d'utiliser des conditions dans les composants React. Ces conditions sont utilis\u00e9es pour afficher ou non des \u00e9l\u00e9ments dans les composants React. Ou pour afficher des \u00e9l\u00e9ments diff\u00e9rents dans les composants React selon une condition.</p> <p>Condition binaire</p> <pre><code>function App() {\n  // D\u00e9finition d'une variable  \n  const isLogged = true;\n\n  return (\n    &lt;&gt;\n      {\n        // Condition binaire bas\u00e9e sur la variable isLogged\n        isLogged &amp;&amp; &lt;h1&gt;Hello World&lt;/h1&gt;\n    }\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>condition ternaire</p> <pre><code>function App() {\n  const isLogged = true;\n\n  return (\n    &lt;&gt;\n      {\n        // Condition ternaire bas\u00e9e sur la variable isLogged\n        isLogged ? &lt;h1&gt;Hello World&lt;/h1&gt; : &lt;p&gt;you are not logged&lt;/p&gt;\n      }\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Dans les deux exemples pr\u00e9c\u00e9dents, la condition est bas\u00e9e sur une variable. Cela sembe inutile car la variable est d\u00e9finie directement dans le composant React. Cependant, dans la plupart des cas, la condition est bas\u00e9e sur une propri\u00e9t\u00e9 du composant React.</p>"},{"location":"#boucle","title":"Boucle","text":"<p>Il est possible d'utiliser des boucles dans les composants React. Ces boucles sont utilis\u00e9es pour afficher une liste d'\u00e9l\u00e9ments dans les composants React.</p> <p>Dans l'exemple suivant, nous utilisons la m\u00e9thode map pour afficher une liste d'utilisateurs dans le composant React. Le composant React affiche une balise <code>&lt;p&gt;</code> pour chaque utilisateur.</p> <p>Remarque : il faut ajouter un attribut key pour chaque \u00e9l\u00e9ment de la boucle. Cet attribut permet \u00e0 React de savoir quel \u00e9l\u00e9ment a \u00e9t\u00e9 modifi\u00e9.</p> <pre><code>function App() {\n  const users = [\n    {id: 1, name: \"John\"},\n    {id: 2, name: \"Jane\"},\n    {id: 3, name: \"Jack\"}\n  ];\n\n  return (\n    &lt;&gt;\n      {users.map(user =&gt; &lt;p key={user.id}&gt;{user.name}&lt;/p&gt;)}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"#composants","title":"Composants","text":"<p>Cr\u00e9er un composant, c'est cr\u00e9er une fonction qui retourne du JSX. Il faut respecter la convention de nommage des composants React. Le nom des composants React doit commencer par une majuscule.</p> <p>Le but d'un composant React est de cr\u00e9er un \u00e9l\u00e9ment qui peut \u00eatre r\u00e9utilis\u00e9 dans d'autres composants React. Cela permet de cr\u00e9er des composants React plus facilement et de rendre le code plus lisible. </p> <p>Un composant React peut \u00eatre utilis\u00e9 dans un autre composant React en utilisant la syntaxe suivante : <code>&lt;NomDuComposant /&gt;</code>.</p> <p>Le composant peut \u00eatre utilis\u00e9 plusieurs fois dans le m\u00eame composant React.</p> <p>Le composant \u00e9tant une simple fonction Javascript, il est possible de l'exporter et de l'importer dans un autre fichier. Cela permet de cr\u00e9er des composants React dans des fichiers s\u00e9par\u00e9s, qui peuvent \u00eatre r\u00e9utilis\u00e9s dans d'autres composants React. C'est par exemple le cas du composant <code>&lt;App /&gt;</code> qui est d\u00e9fini dans le fichier App.js et qui est utilis\u00e9 dans le fichier index.js.</p> <p>Cela permet de rendre le code plus lisible et de faciliter la maintenance du code. </p> <pre><code>// Cr\u00e9ation d'un composant React personnalis\u00e9\nfunction Title() {\n  return (&lt;h1&gt;Hello World&lt;/h1&gt;);\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      {/* Utilisation du composant React personnalis\u00e9 */}\n      &lt;Title /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Passer des propri\u00e9t\u00e9s \u00e0 un composant</p> <p>Un composant React \u00e9tant une simple fonction JavaScript, il est possible de passer des propri\u00e9t\u00e9s \u00e0 un composant React. </p> <p>Par exemple dans le composant <code>&lt;Title /&gt;</code>, nous pouvons passer une propri\u00e9t\u00e9 color pour d\u00e9finir la couleur du titre. Les propri\u00e9t\u00e9s sont pass\u00e9es au composant React en utilisant la syntaxe suivante : <code>&lt;NomDuComposant nomDeLaPropriete=\"valeur\" /&gt;</code>.</p> <p>Comme pour une fonction JavaScript, il est possible de d\u00e9finir une valeur par d\u00e9faut pour une propri\u00e9t\u00e9. </p> <p>Dans l'exemple suivant la propri\u00e9t\u00e9 color a une valeur par d\u00e9faut rouge. Si la propri\u00e9t\u00e9 color n'est pas d\u00e9finie, la valeur par d\u00e9faut sera utilis\u00e9e. On peut aussi passer une propri\u00e9t\u00e9 sans valeur. Dans ce cas, la valeur de la propri\u00e9t\u00e9 est un bool\u00e9en qui sera true si la propri\u00e9t\u00e9 est d\u00e9finie et false si la propri\u00e9t\u00e9 n'est pas d\u00e9finie.</p> <pre><code>function Title({ color = 'red', hidden = false }) {\n  return (&lt;h1 style={{color: color}}&gt;Hello World&lt;/h1&gt;);\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Title color=\"blue\" hidden /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>La propri\u00e9t\u00e9 children</p> <p>La propri\u00e9t\u00e9 children est une propri\u00e9t\u00e9 particuli\u00e8re. Elle permet de d\u00e9finir le contenu d'un composant React. Ce contenu peut \u00eatre du texte ou d'autres composants React.</p> <pre><code>function Title({ color = 'red', children, hidden = false }) {\n  if (hidden) {\n      return null;\n  }\n\n  return (&lt;h1 style={{color: color}}&gt;{children}&lt;/h1&gt;);\n}\n\nfunction App() {\nreturn (\n  &lt;&gt;\n    &lt;Title color=\"blue\" hidden&gt;Hello World&lt;/Title&gt;\n  &lt;/&gt;\n);\n}\n\nexport default App;\n</code></pre> <p>spread operator</p> <p>Le spread operator permet de passer toutes les propri\u00e9t\u00e9s d'un objet \u00e0 un composant React. Cela permet de rendre le code plus lisible et de faciliter la maintenance du code.</p> <pre><code>function Title({ color = 'red', children, hidden = false, ...props }) {\n  if (hidden) {\n      return null;\n  }\n\n  return (&lt;h1 style={{color: color}} {...props}&gt;{children}&lt;/h1&gt;);\n}\n\nfunction App() {\nreturn (\n  &lt;&gt;\n    {/* \n        La propri\u00e9t\u00e9 id et data-demo sont pass\u00e9es au composant Title gr\u00e2ce au spread operator.\n        La propri\u00e9t\u00e9 color est d\u00e9finie dans le composant Title\n     */}\n    &lt;Title color=\"blue\" id=\"my-id\" data-demo=\"demo\"&gt;Hello World&lt;/Title&gt;\n  &lt;/&gt;\n);\n}\n\nexport default App;\n</code></pre>"},{"location":"home/","title":"react","text":"<p>React est une librairie JavaScript d\u00e9velopp\u00e9e par Facebook et Instagram. Elle permet de cr\u00e9er des interfaces utilisateurs interactives et dynamiques. Elle est utilis\u00e9e par de nombreux sites web et applications, comme Facebook, Instagram, Netflix, Airbnb, Uber, etc.</p> <p>React est une librairie JavaScript, et non un framework. Cela signifie qu'elle ne fournit pas de structure ou de m\u00e9thodologie pour organiser votre code. Elle ne fournit pas non plus de fonctionnalit\u00e9s pour g\u00e9rer les requ\u00eates HTTP, les routes, etc. Elle se concentre uniquement sur la cr\u00e9ation d'interfaces utilisateurs.</p> <p>React est une librairie open source, et est donc gratuite. Elle est distribu\u00e9e sous licence MIT.</p>"},{"location":"home/#pourquoi-utiliser-react","title":"Pourquoi utiliser React ?","text":"<p>React est une librairie tr\u00e8s populaire, et est utilis\u00e9e par de nombreux sites web et applications. Elle est donc tr\u00e8s bien maintenue, et dispose d'une grande communaut\u00e9. Il existe de nombreux tutoriels, articles, vid\u00e9os, etc. pour vous aider \u00e0 apprendre React.</p> <p>React est \u00e9galement tr\u00e8s performant. Il est con\u00e7u pour \u00eatre rapide, et pour g\u00e9rer efficacement les mises \u00e0 jour de l'interface utilisateur. Il est \u00e9galement tr\u00e8s flexible, et peut \u00eatre utilis\u00e9 pour cr\u00e9er des interfaces utilisateurs simples ou complexes.</p>"},{"location":"home/#prerequis","title":"Pr\u00e9requis","text":"<p>Pour pouvoir utiliser React, il faut avoir des connaissances en HTML, CSS et JavaScript.</p>"},{"location":"home/#concepts","title":"Concepts","text":"<p>Une interface utilisateur est compos\u00e9e de plusieurs \u00e9l\u00e9ments appel\u00e9s composants. Un composant est une partie de l'interface utilisateur qui peut \u00eatre r\u00e9utilis\u00e9e plusieurs fois dans l'application.</p> <pre><code>+-----------------------+\n|       App Component   |\n|                       |\n|   +---------------+   |\n|   |   Header      |   |\n|   +---------------+   |\n|   |   Main        |   |\n|   +---------------+   |\n|   |   Footer      |   |\n|   +---------------+   |\n|                       |\n+-----------------------+\n</code></pre> <p>Dans ce sch\u00e9ma, l'application est compos\u00e9e de trois composants : Header, Main et Footer. Chaque composant peut \u00eatre r\u00e9utilis\u00e9 plusieurs fois dans l'application. Par exemple, le composant Header peut \u00eatre utilis\u00e9 dans la page d'accueil et dans la page de contact.</p> <p>Un composant peut \u00eatre compos\u00e9 d'autres composants. Par exemple, le composant App est compos\u00e9 des composants Header, Main et Footer.</p> <p>On peut voir les composants comme des Lego. Chaque composant est un bloc de construction qui peut \u00eatre r\u00e9utilis\u00e9 plusieurs fois dans l'application.</p>"},{"location":"home/#installation","title":"Installation","text":"<p>React propose deux m\u00e9thodes pour installer React sur votre machine.</p>"},{"location":"home/#installation-avec-un-cdn","title":"Installation avec un CDN","text":"<p>La premi\u00e8re m\u00e9thode consiste \u00e0 utiliser un CDN (Content Delivery Network) pour r\u00e9cup\u00e9rer les fichiers n\u00e9cessaires \u00e0 l'utilisation de React. Pour cela, il suffit d'ajouter les lignes suivantes dans le <code>&lt;head&gt;</code> de votre fichier HTML :</p> <pre><code>&lt;!-- React --&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.8.6/umd/react.production.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.6/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Cette m\u00e9thode est la plus simple \u00e0 mettre en place, mais elle ne permet pas de profiter de toutes les fonctionnalit\u00e9s de React. </p>"},{"location":"home/#installation-avec-create-react-app","title":"Installation avec create-react-app","text":"<p>React propose une deuxi\u00e8me m\u00e9thode pour installer React sur votre machine. Cette m\u00e9thode consiste \u00e0 utiliser un outil appel\u00e9 create-react-app. Cet outil permet de cr\u00e9er une application React en quelques secondes.</p> <p>Pour installer create-react-app, il suffit d'ouvrir un terminal et de taper la commande suivante :</p> <pre><code>npx create-react-app my-app\ncd my-app\n</code></pre> <p>Cette commande va cr\u00e9er un dossier my-app dans le dossier courant. Ce dossier contiendra tous les fichiers n\u00e9cessaires \u00e0 l'utilisation de React.</p> <p>Pour lancer l'application React, il suffit d'ouvrir un terminal et de taper la commande suivante :</p> <pre><code>npm start\n</code></pre> <p>Cette commande va lancer l'application React dans le navigateur par d\u00e9faut. L'application React est accessible \u00e0 l'adresse suivante : http://localhost:3000. </p> <p>La fonctionnalit\u00e9 de live-reload est activ\u00e9e par d\u00e9faut. Cela signifie que si vous modifiez un fichier, l'application React sera automatiquement recharg\u00e9e dans le navigateur.</p>"},{"location":"home/#structure-dun-projet-react","title":"Structure d'un projet React","text":"<p>Un projet React cr\u00e9\u00e9 avec create-react-app contient un ensemble de fichiers et de dossiers qui permettent de d\u00e9velopper une application React. Nous verrons dans les prochains chapitres \u00e0 quoi servent ces fichiers et dossiers.</p> <p>Voici la liste des fichiers et dossiers d'un projet React cr\u00e9\u00e9 avec create-react-app :</p> <ul> <li><code>node_modules</code> : ce dossier contient les d\u00e9pendances de l'application React. </li> <li><code>public</code> : ce dossier contient les fichiers statiques de l'application React.</li> <li><code>src</code> : ce dossier contient les fichiers sources de l'application React. C'est dans ce dossier que nous allons d\u00e9velopper notre application React.</li> <li><code>.gitignore</code> : ce fichier contient la liste des fichiers et dossiers \u00e0 ignorer par Git.</li> <li><code>package.json</code> : ce fichier contient la liste des d\u00e9pendances de l'application React.</li> <li><code>package-lock.json</code> : ce fichier contient la liste des d\u00e9pendances de l'application React.</li> <li><code>README.md</code> : ce fichier contient la documentation de l'application React. Nous modifierons ce fichier dans les prochains chapitres.</li> </ul>"},{"location":"home/#outils-de-developpement","title":"Outils de d\u00e9veloppement","text":"<p>React propose un ensemble d'outils de d\u00e9veloppement qui permettent de d\u00e9velopper une application React plus facilement.</p>"},{"location":"home/#react-developer-tools","title":"React Developer Tools","text":"<p>React Developer Tools est une extension pour Chrome et Firefox qui permet d'inspecter les composants React d'une application React.</p> <p>Pour installer React Developer Tools, il suffit d'ouvrir le Chrome Web Store ou le Firefox Add-ons Store et de rechercher React Developer Tools. Une fois l'extension install\u00e9e, il suffit de l'activer pour qu'elle soit disponible dans le navigateur.</p>"},{"location":"react-router/","title":"react-router","text":"<p>Le router est un composant qui permet de g\u00e9rer la navigation dans une application React. Il permet de d\u00e9finir des routes qui correspondent \u00e0 des composants. Les routes sont les chemins d'acc\u00e8s aux composants. Par exemple, si on veut afficher le composant <code>Home</code> \u00e0 la racine de notre application, on va d\u00e9finir une route <code>/</code> qui correspond \u00e0 ce composant.</p> <p>Pour installer le router, on va utiliser la commande suivante :</p> <pre><code>npm install react-router-dom\n</code></pre>"},{"location":"react-router/#definition-des-routes","title":"D\u00e9finition des routes","text":"<p>Le router est l'\u00e9l\u00e9ment le plus haut de notre application. On va donc l'ajouter dans le composant <code>App</code> :</p> <pre><code>import { RouterProvider, createBrowserRouter } from 'react-router-dom';\nimport routes from './routes';\n\n// Create a router that uses the client side history strategy for\nconst router = createBrowserRouter(routes)\n\nexport default function App() {\n  return (\n    &lt;RouterProvider router={router} /&gt;\n  );\n}\n</code></pre> <p>On va ensuite d\u00e9finir les routes de notre application dans un fichier <code>routes.jsx</code> :</p> <pre><code>const routes = [\n    {\n        path: \"/\",\n        element: &lt;div&gt;Home&lt;/div&gt;,\n    },\n    {\n        path: \"/blog\",\n        element: &lt;div&gt;Blog&lt;/div&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;div&gt;Contact&lt;/div&gt;,\n    }\n];\n\nexport default routes;\n</code></pre> <p>Notre application est maintenant capable de g\u00e9rer les routes <code>/</code>, <code>/blog</code> et <code>/contact</code>. On peut tester le fonctionnement depuis le navigateur. On constate aussi que l'acc\u00e8s \u00e0 une route inconnue affiche une page d'erreur.</p>"},{"location":"react-router/#navigation","title":"Navigation","text":"<p>react-router nous fournit des composants pour g\u00e9rer la navigation. Ce composant est <code>Link</code>, il permet de cr\u00e9er des liens vers nos routes et g\u00e8re la navigation sans recharger la page.</p> <pre><code>import { Link } from \"react-router-dom\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;div&gt;\n            Home\n            &lt;nav&gt;\n                &lt;Link to=\"/blog\"&gt;Blog&lt;/Link&gt;\n                &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    },\n    {\n        path: \"/blog\",\n        element: &lt;div&gt;\n            Blog\n            &lt;nav&gt;\n                &lt;Link to=\"/blog\"&gt;Blog&lt;/Link&gt;\n                &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;div&gt;\n            Contact\n            &lt;nav&gt;\n                &lt;Link to=\"/blog\"&gt;Blog&lt;/Link&gt;\n                &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    }\n];\n\nexport default routes;\n</code></pre> <p>Il existe \u00e9galement un composant <code>NavLink</code> qui permet de g\u00e9rer les liens actifs. Par exemple, si on est sur la route <code>/blog</code>, le lien vers <code>/blog</code> sera actif. Par d\u00e9faut, le composant <code>NavLink</code> ajoute la classe <code>active</code> sur le lien actif. On peut modifier cette classe en utilisant la prop <code>activeClassName</code>.</p> <pre><code>import { NavLink } from \"react-router-dom\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;div&gt;\n            Home\n            &lt;nav&gt;\n                &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    },\n    {\n        path: \"/blog\",\n        element: &lt;div&gt;\n            Blog\n            &lt;nav&gt;\n                &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;div&gt;\n            Contact\n            &lt;nav&gt;\n                &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    }\n];\n\nexport default routes;\n</code></pre>"},{"location":"react-router/#route-parametree","title":"Route param\u00e9tr\u00e9e","text":"<p>On peut d\u00e9finir des routes param\u00e9tr\u00e9es. Par exemple, si on veut afficher un article de blog, on va d\u00e9finir une route <code>/blog/:id</code> qui correspond \u00e0 un composant <code>BlogPost</code> :</p> <pre><code>import { NavLink } from \"react-router-dom\";\nimport BlogPost from \"./components/BlogPost\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;div&gt;\n            Home\n            &lt;nav&gt;\n                &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    },\n    {\n        path: \"/blog\",\n        element: &lt;div&gt;\n            Blog\n            &lt;nav&gt;\n                &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    },\n    {\n        path: \"/blog/:id\",\n        element: &lt;BlogPost /&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;div&gt;\n            Contact\n            &lt;nav&gt;\n                &lt;NavLink to=\"/\"&gt;Home&lt;/NavLink&gt;\n                &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;,\n    }\n];\n\nexport default routes;\n</code></pre> <p>On peut ensuite r\u00e9cup\u00e9rer le param\u00e8tre <code>id</code> dans le composant <code>BlogPost</code>, gr\u00e2ce au hook <code>useParams</code> :</p> <pre><code>import { useParams } from \"react-router-dom\";\n\nexport default function BlogPost() {\n    const { id } = useParams();\n\n    return (\n        &lt;div&gt;\n            Article {id}\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"react-router/#route-imbriquee","title":"Route imbriqu\u00e9e","text":"<p>La route imbriqu\u00e9e permet de d\u00e9finir des comportements communs \u00e0 plusieurs routes. Par exemple, si on veut afficher un header et un footer sur toutes les pages de notre application, on va d\u00e9finir une route imbriqu\u00e9e.</p> <p>Le composant <code>Outlet</code> permet ensuite d'inclure les routes imbriqu\u00e9es dans notre application.</p> <pre><code>import { NavLink, Outlet} from \"react-router-dom\";\nimport BlogPost from \"./components/BlogPost\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Root /&gt;,\n        children: [\n            {\n                path: \"blog\",\n                element: &lt;div&gt;Blog&lt;/div&gt;,\n            },\n            {\n                path: \"blog/:id\",\n                element: &lt;BlogPost /&gt;,\n            },\n            {\n                path: \"contact\",\n                element: &lt;div&gt;Contact&lt;/div&gt;,\n            }\n        ]\n    }\n];\n\nfunction Root() {\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                    &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;div className=\"content\"&gt;\n                &lt;Outlet /&gt;\n            &lt;/div&gt;\n            &lt;footer&gt;\n                Footer\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n}\n\nexport default routes;\n</code></pre>"},{"location":"react-router/#route-non-trouvee","title":"Route non trouv\u00e9e","text":"<p>Afin de g\u00e9rer les routes non trouv\u00e9es, on va d\u00e9finir une route <code>*</code>. Selon que l'on positionne la route <code>*</code> au m\u00eame niveau que les autres routes ou dans une route imbriqu\u00e9e, on va avoir un comportement diff\u00e9rent.</p> <pre><code>import { NavLink, Outlet} from \"react-router-dom\";\nimport BlogPost from \"./components/BlogPost\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Root /&gt;,\n        children: [\n            {\n                path: \"blog\",\n                element: &lt;div&gt;Blog&lt;/div&gt;,\n            },\n            {\n                path: \"blog/:id\",\n                element: &lt;BlogPost /&gt;,\n            },\n            {\n                path: \"contact\",\n                element: &lt;div&gt;Contact&lt;/div&gt;,\n            },\n            {\n                path: \"*\",\n                element: &lt;div&gt;Not Found&lt;/div&gt;,\n            }\n        ]\n    }\n];\n\nfunction Root() {\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                    &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;div className=\"content\"&gt;\n                &lt;Outlet /&gt;\n            &lt;/div&gt;\n            &lt;footer&gt;\n                Footer\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n}\n\nexport default routes;\n</code></pre> <p>Si on positionne la route <code>*</code> au m\u00eame niveau que les autres routes, elle va s'afficher \u00e0 chaque fois qu'une route n'est pas trouv\u00e9e. Si on la positionne dans une route imbriqu\u00e9e, elle va s'afficher uniquement si aucune route imbriqu\u00e9e n'est trouv\u00e9e.</p>"},{"location":"react-router/#loader","title":"Loader","text":"<p>La propri\u00e9t\u00e9 <code>loader</code> permet d'executer une action avant d'afficher le composant. Par exemple, si on veut charger des donn\u00e9es avant d'afficher le composant, on va utiliser cette propri\u00e9t\u00e9.</p> <pre><code>import { NavLink, Outlet} from \"react-router-dom\";\nimport BlogPost from \"./components/BlogPost\";\nimport Blog from \"./components/Blog\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Root /&gt;,\n        children: [\n            {\n                path: \"blog\",\n                element: &lt;Blog /&gt;,\n                loader: () =&gt; fetch(\"https://jsonplaceholder.typicode.com/posts?_limit=10\"),\n            },\n            {\n                path: \"blog/:id\",\n                element: &lt;BlogPost /&gt;,\n            },\n            {\n                path: \"contact\",\n                element: &lt;div&gt;Contact&lt;/div&gt;,\n            },\n            {\n                path: \"*\",\n                element: &lt;div&gt;Not Found&lt;/div&gt;,\n            }\n        ]\n    }\n];\n\nfunction Root() {\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                    &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;Outlet /&gt;\n            &lt;footer&gt;\n                Footer\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n}\n\nexport default routes;\n</code></pre> <p>La r\u00e9cup\u00e9ration des donn\u00e9es se fait ensuite dans le composant <code>Blog</code> gr\u00e2ce au hook <code>useLoaderData</code> :</p> <pre><code>import { useLoaderData } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function Blog() {\n    const posts = useLoaderData();\n    return (\n        &lt;div&gt;\n            Blog\n            &lt;ul&gt;\n                {posts.map(post =&gt; (\n                    &lt;li key={post.id}&gt;\n                        &lt;NavLink to={`/blog/${post.id}`}&gt;{post.title}&lt;/NavLink&gt;\n                    &lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>La r\u00e9cup\u00e9ration des donn\u00e9es pouvant prendre du temps, on peut afficher un loader pendant le chargement des donn\u00e9es. </p> <pre><code>import { Outlet, useNavigation } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport BlogPost from \"./components/blog-post\";\nimport Blog from \"./components/blog\";\n\n\nconst routes =  [\n    {\n        path: \"/\",\n        element: &lt;Root /&gt;,\n        children: [\n            {\n                path: \"blog\",\n                element: &lt;Blog /&gt;,\n                loader: () =&gt; fetch(\"https://jsonplaceholder.typicode.com/posts?_limit=10\"),\n            },\n            {\n                path: \"blog/:id\",\n                element: &lt;BlogPost /&gt;,\n            },\n            {\n                path: \"contact\",\n                element: &lt;div&gt;\n                    Contact\n                &lt;/div&gt;,\n            }\n        ],\n    },\n    {\n        path: \"*\",\n        element: &lt;div&gt;Not Found&lt;/div&gt;,\n    }\n]\n\nfunction Root() {\n    const {state} = useNavigation();\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                    &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;div className=\"content\"&gt;\n                {state === \"loading\" &amp;&amp; \"Loading...\"}\n                &lt;Outlet /&gt;\n            &lt;/div&gt;\n            &lt;footer&gt;\n                Footer\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n}\n\nexport default routes;\n</code></pre>"},{"location":"react-router/#lazy-loading","title":"Lazy loading","text":"<p>L'inconv\u00e9nient de la m\u00e9thode pr\u00e9c\u00e9dente est que le composant <code>Blog</code> n'est affich\u00e9 qu'une fois les donn\u00e9es charg\u00e9es. </p> <p>On peut utiliser la m\u00e9thode <code>defer</code> pour afficher le composant <code>Blog</code> avant le chargement des donn\u00e9es. </p> <pre><code>import { defer, NavLink, Outlet, useNavigation} from \"react-router-dom\";\nimport BlogPost from \"./components/BlogPost\";\nimport BlogLazy from \"./components/BlogLazy\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: &lt;Root /&gt;,\n        children: [\n            {\n                path: \"blog\",\n                element: &lt;BlogLazy /&gt;,\n                loader: () =&gt; {\n                    const posts = fetch(\"https://jsonplaceholder.typicode.com/posts?_limit=10\")\n                        .then(response =&gt; response.json());\n                    return defer({\n                        posts,\n                    });\n                },\n            },\n            {\n                path: \"blog/:id\",\n                element: &lt;BlogPost /&gt;,\n            },\n            {\n                path: \"contact\",\n                element: &lt;div&gt;Contact&lt;/div&gt;,\n            },\n            {\n                path: \"*\",\n                element: &lt;div&gt;Not Found&lt;/div&gt;,\n            }\n        ]\n    }\n];\n\nfunction Root() {\n    const {state} = useNavigation();\n    return (\n        &lt;&gt;\n            &lt;header&gt;\n                &lt;nav&gt;\n                    &lt;NavLink to=\"/blog\"&gt;Blog&lt;/NavLink&gt;\n                    &lt;NavLink to=\"/contact\"&gt;Contact&lt;/NavLink&gt;\n                &lt;/nav&gt;\n            &lt;/header&gt;\n            &lt;div className=\"content\"&gt;\n                {state === \"loading\" &amp;&amp; \"Loading...\"}\n                &lt;Outlet /&gt;\n            &lt;/div&gt;\n            &lt;footer&gt;\n                Footer\n            &lt;/footer&gt;\n        &lt;/&gt;\n    );\n}\n\nexport default routes;\n</code></pre> <p>Gr\u00e2ce \u00e0 la m\u00e9thode <code>defer</code>, on ne retourne pas directement les donn\u00e9es mais une promesse qui contient les donn\u00e9es. </p> <p>Dans le composant utilisant les donn\u00e9es, il faut donc faire \u00e9voluer le code pour g\u00e9rer le cas o\u00f9 les donn\u00e9es ne sont pas encore charg\u00e9es.</p> <pre><code>import { Suspense } from \"react\";\nimport { Await, useAsyncValue, useLoaderData } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function BlogLazy() {\n    const { posts } = useLoaderData();\n\n    return (\n        &lt;div&gt;\n            Blog\n            &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;\n                &lt;Await\n                    resolve={posts}\n                &gt;\n                    &lt;PostsList /&gt;\n                &lt;/Await&gt;\n            &lt;/Suspense&gt;\n        &lt;/div&gt;\n    );\n}\n\nfunction PostsList() {\n    const posts = useAsyncValue();\n\n    return (\n        &lt;ul&gt;\n            {posts.map(post =&gt; (\n                &lt;li key={post.id}&gt;\n                    &lt;NavLink to={`/blog/${post.id}`}&gt;{post.title}&lt;/NavLink&gt;\n                &lt;/li&gt;\n            ))}\n        &lt;/ul&gt;\n    );\n}\n</code></pre>"},{"location":"use-state/","title":"useState","text":"<p>Gestion de l'\u00e9tat dans un composant.</p> <p>L'\u00e9tat d'un composant est une donn\u00e9e qui peut changer au cours du temps. Par exemple, dans une application de compteur, l'\u00e9tat du composant est le nombre de clics sur le bouton.</p>"},{"location":"use-state/#declaration","title":"D\u00e9claration","text":"<p>La fonction <code>useState</code> permet de g\u00e9rer l'\u00e9tat dans un composant. Elle prend en param\u00e8tre la valeur initiale de l'\u00e9tat et retourne un tableau contenant la valeur de l'\u00e9tat et une fonction pour modifier la valeur de l'\u00e9tat.</p> <pre><code>const [state, setState] = useState(initialState);\n</code></pre>"},{"location":"use-state/#exemple","title":"Exemple","text":"<pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez cliqu\u00e9 {count} fois&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Cliquez ici\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Il est possible de ressortir la fonction de l'\u00e9v\u00e9nement <code>onClick</code> dans une fonction \u00e0 part.</p> <pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () =&gt; {\n    setCount(count + 1);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez cliqu\u00e9 {count} fois&lt;/p&gt;\n      &lt;button onClick={handleClick}&gt;\n        Cliquez ici\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Si l'on souhaite passer des param\u00e8tres \u00e0 la fonction <code>handleClick</code>, il faut utiliser une fonction fl\u00e9ch\u00e9e. Par exemple si l'on souhaite ajouter 1 \u00e0 la valeur de l'\u00e9tat, il faut \u00e9crire :</p> <pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = (value) =&gt; {\n    setCount(count + value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez cliqu\u00e9 {count} fois&lt;/p&gt;\n      &lt;button onClick={() =&gt; handleClick(1)}&gt;\n        Cliquez ici\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Il est possible de g\u00e9rer plusieurs \u00e9tats dans un composant. Pour cela, il suffit d'appeler la fonction <code>useState</code> plusieurs fois.</p> <pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('John Doe');\n\n  const handleClick = (value) =&gt; {\n    setCount(count + value);\n  };\n\n  const handleChange = (event) =&gt; {\n    setName(event.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Vous avez \u00e9crit: {name}&lt;/p&gt;\n      &lt;p&gt;Vous avez cliqu\u00e9 {count} fois&lt;/p&gt;\n      &lt;button onClick={() =&gt; handleClick(1)}&gt;\n        Cliquez ici\n      &lt;/button&gt;\n      &lt;input type=\"text\" value={name} onChange={handleChange} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Dans l'exemple du champ de saisie du nom, nous acc\u00e8dons \u00e0 l'objet <code>event</code> qui contient la valeur de l'input. Pour r\u00e9cup\u00e9rer la valeur de l'input, il faut utiliser <code>event.target.value</code>. Cet objet <code>event</code> est pass\u00e9 automatiquement par React \u00e0 la fonction <code>handleChange</code>.</p>"},{"location":"use-state/#mutable-vs-immutable","title":"Mutable vs Immutable","text":"<p>L'\u00e9tat d'un composant est immutable. Cela signifie que l'on ne peut pas modifier directement la valeur de l'\u00e9tat. Par exemple, si l'on souhaite ajouter 1 \u00e0 la valeur de l'\u00e9tat, il faut \u00e9crire :</p> <pre><code>const handleClick = () =&gt; {\n  setCount(count + 1);\n};\n</code></pre> <p>et non pas :</p> <pre><code>const handleClick = () =&gt; {\n  count = count + 1;\n};\n</code></pre> <p>De m\u00eame pour un tableau, si l'on souhaite ajouter un \u00e9l\u00e9ment \u00e0 un tableau, il faut \u00e9crire :</p> <pre><code>const handleClick = () =&gt; {\n  setList([...list, 'element']);\n};\n</code></pre> <p>et non pas :</p> <pre><code>const handleClick = () =&gt; {\n  list.push('element');\n};\n</code></pre> <p>Pour un objet, si l'on souhaite ajouter une propri\u00e9t\u00e9 \u00e0 un objet, il faut \u00e9crire :</p> <pre><code>const handleClick = () =&gt; {\n  setObj({ ...obj, key: 'value' });\n};\n</code></pre> <p>et non pas :</p> <pre><code>const handleClick = () =&gt; {\n  obj.key = 'value';\n};\n</code></pre>"}]}